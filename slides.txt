         FPGABoy by Kai Tamkun
             _____________
            | _"_________ |
            ||.---------.||
            |||         |||
            |||         |||
            |||         |||
            |||         |||
            ||'---------'/|
            | """"""""""` |
            | ||  ^^^  () |
            |[  ]    ()   |
            | ||          |
            |             |
            |             |
            |     _ _     |
            |          :::|
        jgs |         .::`/
            '"""""""""""""
       Image Credit: Joan Stark
\s

                Project

 - Made a Game Boy sound chip

 - Accuracy nice but not a requirement
   - Clocks and CDC are finicky

 - Got bored, implemented NES APU too

 - More than 125 hours of work, whoops
\s

               Generators

 - Not used much in this project tbh

 - Created some nice generators
   (TableGen, TriangleGen, NoiseGen,
   FPSummer, DynamicClocker, Divider)
   and proceeded to never use them

 - Used SquareGenExternal, StaticClocker
   and PeriodClocker

 - Can very conveniently prefill Vecs
   with sine wave values
\s

               Interfaces

 - Standard buttons, switches and LEDs

 - Code produces 9/10-bit audio

 - Audio is output over HDMI and aux
\s

        Incremental Development

  1. Implemented square and sine waves
  2. Multi-cycle channel mixer
  3. Top-level Verilog
  4. Basic audio over aux
  5. VGM tools
  6. State machine
  7. Game Boy channels: 1, 2, 4, 3
  8. HDMI output: video, audio
  9. Presentation slides
 10. NES channels: 1, 2, 3, 4
 11. Silly graphics stuff (you'll see)
\s

                Testing

 - Testing? Never heard of it #yolo

 - test:main ratio < 20%

 - Tests mostly just generate VCD output
   for manual inspection in GTKWave

 - Divider was exhaustively tested for
   8-bit inputs
\s

             Inner Workings

 - State machine writes to registers,
   channel modules read and interpret

 - State machine input stored in BRAM
\s

              Presentation

 - I forgot there were two projectors 

 - Slides stored as ASCII(-ish) in BRAM

 - Rendered by FPGA

 - Typeface might look familiar
\s

              Game Boy APU

 - Game Boy and Game Boy Color use the
   same sound chip

 - Channel 1: square wave with frequency
   sweeper, envelope, length counter and
   duty cycler

 - Channel 2: channel 1 without sweeper

 - Channel 3: output arbitrary waveforms
   from registers

 - Channel 4: LFSR-based noise generator
\s

    Pokmon Card GB2 (GR duel music)
\s

                NES APU

 - Similar to Game Boy APU

 - Channels: 2 square waves, triangle
   wave, noise, delta modulation channel

 - DMC unimplemented due to format
   constraints
   - Not very commonly used anyway

 - Triggering based on register writes,
   not designated bits

\s

   The Legend of Zelda (title screen)
\s



     Thanks for a great quarter! =)


   https://github.com/heimskr/wavegen


         Discord: Heimskr#0001